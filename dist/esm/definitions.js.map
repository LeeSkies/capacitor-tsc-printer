{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface PrinterPlugin {\n  /**\n   * Print a PDF from base64 string via network connection\n   * @param options - Print options including base64 PDF data and positioning\n   * @returns Promise that resolves when printing is complete\n   */\n  printPDFByNetwork(options: PrintPdfOptions): Promise<void>;\n\n  /**\n   * Print a PDF from base64 string via USB connection\n   * @param options - Print options including base64 PDF data and positioning (no IP/port needed)\n   * @returns Promise that resolves when printing is complete\n   */\n  printPDFByUSB(options: PrintPdfUSBOptions): Promise<void>;\n\n  /**\n   * Discover available network printers using UDP broadcast\n   * @param options - Optional discovery options (all parameters have defaults)\n   * @returns Promise that resolves with list of discovered printers\n   */\n  discoverNetworkPrinters(options?: DiscoveryOptions): Promise<DiscoveryResult>;\n\n  /**\n   * Configure static IP address for a network printer (auto-detects subnet mask and gateway)\n   * @param options - Static IP configuration options\n   * @returns Promise that resolves with the configured static IP details\n   */\n  configureStaticIP(options: StaticIPOptions): Promise<StaticIPResult>;\n}\n\nexport interface PrintPdfOptions {\n  /** IP address of the TSC printer */\n  IPAddress: string;\n  /** Port number for printer connection */\n  port: number;\n  /** Base64 encoded PDF data */\n  base64String: string;\n  /** X offset position for printing */\n  offsetX: number;\n  /** Y offset position for printing */\n  offsetY: number;\n  /** DPI (dots per inch) for printing quality */\n  dpi: number;\n}\n\nexport interface PrintPdfUSBOptions {\n  /** Base64 encoded PDF data */\n  base64String: string;\n  /** X offset position for printing */\n  offsetX: number;\n  /** Y offset position for printing */\n  offsetY: number;\n  /** DPI (dots per inch) for printing quality */\n  dpi: number;\n}\n\nexport interface BaseDiscoveryOptions {\n  /** Timeout in milliseconds for printer discovery (default: 5000ms) */\n  timeoutMs?: number;\n}\n\nexport interface FirstFoundDiscoveryOptions extends BaseDiscoveryOptions {\n  /** Return only the first printer found for faster discovery */\n  returnFirst: true;\n}\n\nexport interface TargetMacDiscoveryOptions extends BaseDiscoveryOptions {\n  /** Return immediately when a printer with this MAC address is found */\n  targetMacAddress: string;\n}\n\nexport type DiscoveryOptions = BaseDiscoveryOptions | FirstFoundDiscoveryOptions | TargetMacDiscoveryOptions;\n\nexport interface PrinterInfo {\n  /** IP address of the discovered printer */\n  ipAddress: string;\n  /** Printer model name or identifier */\n  name: string;\n  /** MAC address of the printer */\n  macAddress: string;\n  /** Current status of the printer */\n  status: string;\n}\n\nexport interface DiscoveryResult {\n  /** Array of discovered printers */\n  printers: PrinterInfo[];\n  /** Total number of printers found */\n  count: number;\n}\n\nexport interface StaticIPOptions {\n  /** Current IP address of the printer to configure */\n  printerIP: string;\n  /** Port number for printer connection (default: 9100) */\n  port?: number;\n  /** New static IP address to assign to the printer */\n  staticIP: string;\n}\n\nexport interface StaticIPResult {\n  /** Whether the configuration was sent successfully */\n  success: boolean;\n  /** The static IP address that was configured */\n  staticIP: string;\n  /** Auto-detected gateway that was used */\n  gateway: string;\n  /** Auto-detected subnet mask that was used */\n  subnetMask: string;\n  /** Status message about the configuration */\n  message: string;\n}"]}